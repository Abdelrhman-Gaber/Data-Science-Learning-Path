# -*- coding: utf-8 -*-
"""CNN - Train face detector using CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V26StEEmiBpQpXpQpmXU62zEZLUaceuk

# CNN - Train detector using CNN
## import libraries and load data
"""

# !unzip Face-Images.zip

TrainingImagePath='Face Images/Final Training Images'
TestingImagePath='Face Images/Final Testing Images'

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
                shear_range=0.1,
                zoom_range=0.1,
                horizontal_flip=True)
test_datagen = ImageDataGenerator()

training_set = train_datagen.flow_from_directory(
                                                  TrainingImagePath,
                                                  target_size=(64, 64),
                                                  batch_size=32,
                                                  class_mode='categorical')
test_set = test_datagen.flow_from_directory(
                                                  TestingImagePath,
                                                  target_size=(64, 64),
                                                  batch_size=32,
                                                  class_mode='categorical')
test_set.class_indices

from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPool2D
from keras.layers import Flatten
from keras.layers import Dense

classifier= Sequential()
classifier.add(Convolution2D(32, kernel_size=(5, 5), strides=(1, 1), input_shape=(64,64,3), activation='relu'))
classifier.add(MaxPool2D(pool_size=(2,2)))
classifier.add(Convolution2D(64, kernel_size=(5, 5), strides=(1, 1), activation='relu'))
classifier.add(MaxPool2D(pool_size=(2,2)))
classifier.add(Flatten())
classifier.add(Dense(64, activation='relu'))
classifier.add(Dense(16, activation='softmax'))
classifier.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=["accuracy"])

classifier.fit(
                    training_set,
                    steps_per_epoch=8,
                    epochs=10,
                    validation_data=test_set,
                    validation_steps=10)

import numpy as np
from keras.preprocessing import image
Mapping = ['face1','face10','face11','face12','face13','face14','face15','face16','face2','face3','face4','face5','face6','face7','face8','face9']
ImagePath='/content/Face Images/Final Testing Images/face10/1face10.jpg'
test_image=image.load_img(ImagePath,target_size=(64, 64))

test_image=image.img_to_array(test_image)
 
test_image=np.expand_dims(test_image,axis=0)
 
result=classifier.predict(test_image,verbose=0)

print(Mapping[np.argmax(result)])