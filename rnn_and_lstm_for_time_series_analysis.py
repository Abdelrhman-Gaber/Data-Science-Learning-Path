# -*- coding: utf-8 -*-
"""RNN and LSTM for time series analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K1wkD0Kg-tVG5kHXxKVXC92wpd4bgE_T

# RNN and LSTM for time series analysis
**Import Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns
from fbprophet import Prophet
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import MinMaxScaler

import datetime
from datetime import date
import random

"""**Import Data**"""

data = pd.read_csv('Metro_Interstate_Traffic_Volume.csv', infer_datetime_format=True)

data.head()

data['date_time'] =  pd.to_datetime(data['date_time'], format='%Y-%m-%d %H:%M:%S')

data = data.set_index(pd.DatetimeIndex(data['date_time']))

ts = data['2018-03-30':'2018-09-29']

ts.head()

"""Train/Test Split"""

#Credit: Adopted from https://machinelearningmastery.com/convert-time-series-supervised-learning-problem-python/
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
    n_vars = 1 if type(data) is list else data.shape[1]
    dff = pd.DataFrame(data)
    cols, names = list(), list()
    # input sequence (t-n, ... t-1)
    for i in range(n_in, 0, -1):
        cols.append(dff.shift(i))
        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
    # forecast sequence (t, t+1, ... t+n)
    for i in range(0, n_out):
        cols.append(dff.shift(-i))
        if i == 0:
            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
        else:
            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
    # put it all together
    agg = pd.concat(cols, axis=1)
    agg.columns = names
    # drop rows with NaN values
    if dropnan:
        agg.dropna(inplace=True)
    return agg

values = pd.DataFrame(ts.traffic_volume.values).set_index(pd.DatetimeIndex(ts['date_time']))

# normalize features
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = pd.DataFrame(scaler.fit_transform(values)).set_index(pd.DatetimeIndex(ts['date_time']))
# frame as supervised learning
reframed = series_to_supervised(scaled, 24, 1)

reframed.head()

"""**Train test Split**"""

split_date = '2018-08-30'
ts_train = reframed.loc[reframed.index <= split_date].copy()
ts_test = reframed.loc[reframed.index > split_date].copy()

train_values = ts_train.values
test_values = ts_test.values
# split into input and outputs
train_X, train_y = train_values[:, :-1], train_values[:, -1]
test_X, test_y = test_values[:, :-1], test_values[:, -1]
train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))
test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)

"""# LSTM"""

import keras
from keras.layers import Dense
from keras.models import Sequential
from keras.layers import Bidirectional
from tensorflow.keras.utils import to_categorical
from keras.optimizers import SGD 
from keras.callbacks import EarlyStopping
from keras.utils import np_utils
import itertools
from keras.layers import LSTM
from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D
from keras.layers import Dropout

# patient early stopping
es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)

"""## *Vanilla LSTM*"""

# https://calvinfeng.gitbook.io/machine-learning-notebook/supervised-learning/recurrent-neural-network/recurrent_neural_networks
model = Sequential()
model.add(LSTM(64, input_shape=(train_X.shape[1], train_X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# fit lstm
history = model.fit(train_X, train_y, epochs=100, batch_size=64, validation_data=(test_X, test_y), verbose=1, shuffle=False, callbacks=[es])

# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

ts_train_fcst = model.predict(train_X)
ts_test_fcst = model.predict(test_X)
# invert predictions
ts_train_fcst = scaler.inverse_transform(ts_train_fcst)
train_y_i = scaler.inverse_transform([train_y])
ts_test_fcst = scaler.inverse_transform(ts_test_fcst)
test_y_i = scaler.inverse_transform([test_y])

def mean_absolute_percentage_error(y_true, y_pred): 
    """Calculates MAPE given y_true and y_pred"""
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

print('Train Mean Absolute Error:', mean_absolute_error(train_y_i[0], ts_train_fcst[:,0]))
print('Train Root Mean Squared Error:',np.sqrt(mean_squared_error(train_y_i[0], ts_train_fcst[:,0])))
print('Test Mean Absolute percentage Error:',mean_absolute_percentage_error(train_y_i[0], ts_train_fcst[:,0]))
print('Test Mean Absolute Error:', mean_absolute_error(test_y_i[0], ts_test_fcst[:,0]))
print('Test Root Mean Squared Error:',np.sqrt(mean_squared_error(test_y_i[0], ts_test_fcst[:,0])))
print('Test Mean Absolute percentage Error:',mean_absolute_percentage_error(test_y_i[0], ts_test_fcst[:,0]))

plt.figure(figsize=(15,6))
plt.plot(ts_test.index, test_y_i[0], marker='o', label="actual")
plt.plot(ts_test.index, ts_test_fcst[:,0], 'r', label="prediction")
plt.ylabel('Traffic Volume', size=15)
plt.xlabel('Date', size=15)
plt.legend(fontsize=13)
plt.show()

# zoom on lastest week)
f, ax = plt.subplots(1)
f.set_figheight(5)
f.set_figwidth(15)
plt.plot(ts_test.index, test_y_i[0], marker='o', label="actual")
plt.plot(ts_test.index, ts_test_fcst[:,0], 'r', label="prediction")
ax.set_xbound(lower= datetime.date(2018,9,22), upper=datetime.date(2018,9,29))
plt.legend(fontsize=13)
plt.xlabel('Date', size=15)
ax.set_ylim(0, 7000)
plot = plt.suptitle('Lastest week Forecast vs Actuals')

"""## Stacked LSTM"""

# https://bmcmedinformdecismak.biomedcentral.com/articles/10.1186/s12911-021-01462-5
model = Sequential()
model.add(LSTM(64, return_sequences=True, input_shape=(train_X.shape[1], train_X.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(64))
model.add(Dropout(0.3))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# fit LSTM
history = model.fit(train_X, train_y, epochs=100, batch_size=64, validation_data=(test_X, test_y), verbose=1, shuffle=False, callbacks=[es])

# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

ts_train_fcst = model.predict(train_X)
ts_test_fcst = model.predict(test_X)
# invert predictions
ts_train_fcst = scaler.inverse_transform(ts_train_fcst)
train_y_i = scaler.inverse_transform([train_y])
ts_test_fcst = scaler.inverse_transform(ts_test_fcst)
test_y_i = scaler.inverse_transform([test_y])

print('Train Mean Absolute Error:', mean_absolute_error(train_y_i[0], ts_train_fcst[:,0]))
print('Train Root Mean Squared Error:',np.sqrt(mean_squared_error(train_y_i[0], ts_train_fcst[:,0])))
print('Test Mean Absolute percentage Error:',mean_absolute_percentage_error(train_y_i[0], ts_train_fcst[:,0]))
print('Test Mean Absolute Error:', mean_absolute_error(test_y_i[0], ts_test_fcst[:,0]))
print('Test Root Mean Squared Error:',np.sqrt(mean_squared_error(test_y_i[0], ts_test_fcst[:,0])))
print('Test Mean Absolute percentage Error:',mean_absolute_percentage_error(test_y_i[0], ts_test_fcst[:,0]))

plt.figure(figsize=(15,6))
plt.plot(ts_test.index, test_y_i[0], marker='o', label="actual")
plt.plot(ts_test.index, ts_test_fcst[:,0], 'r', label="prediction")
plt.ylabel('Traffic Volume', size=15)
plt.xlabel('Date', size=15)
plt.legend(fontsize=13)
plt.show()

# zoom on lastest week)
f, ax = plt.subplots(1)
f.set_figheight(5)
f.set_figwidth(15)
plt.plot(ts_test.index, test_y_i[0], marker='o', label="actual")
plt.plot(ts_test.index, ts_test_fcst[:,0], 'r', label="prediction")
ax.set_xbound(lower= datetime.date(2018,9,22), upper=datetime.date(2018,9,29))
plt.legend(fontsize=13)
plt.xlabel('Date', size=15)
ax.set_ylim(0, 7000)
plot = plt.suptitle('Lastest week Forecast vs Actuals')

"""## Bidirectional LSTM """

# https://machinelearningmastery.com/develop-bidirectional-lstm-sequence-classification-python-kera
model = Sequential()
model.add(Bidirectional(LSTM(64,activation='relu',), input_shape=(train_X.shape[1], train_X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# fit LSTM
history = model.fit(train_X, train_y, epochs=100, batch_size=64, validation_data=(test_X, test_y), verbose=1, shuffle=False, callbacks=[es])

# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

ts_train_fcst = model.predict(train_X)
ts_test_fcst = model.predict(test_X)
# invert predictions
ts_train_fcst = scaler.inverse_transform(ts_train_fcst)
train_y_i = scaler.inverse_transform([train_y])
ts_test_fcst = scaler.inverse_transform(ts_test_fcst)
test_y_i = scaler.inverse_transform([test_y])

print('Train Mean Absolute Error:', mean_absolute_error(train_y_i[0], ts_train_fcst[:,0]))
print('Train Root Mean Squared Error:',np.sqrt(mean_squared_error(train_y_i[0], ts_train_fcst[:,0])))
print('Test Mean Absolute percentage Error:',mean_absolute_percentage_error(train_y_i[0], ts_train_fcst[:,0]))
print('Test Mean Absolute Error:', mean_absolute_error(test_y_i[0], ts_test_fcst[:,0]))
print('Test Root Mean Squared Error:',np.sqrt(mean_squared_error(test_y_i[0], ts_test_fcst[:,0])))
print('Test Mean Absolute percentage Error:',mean_absolute_percentage_error(test_y_i[0], ts_test_fcst[:,0]))

plt.figure(figsize=(15,6))
plt.plot(ts_test.index, test_y_i[0], marker='o', label="actual")
plt.plot(ts_test.index, ts_test_fcst[:,0], 'r', label="prediction")
plt.ylabel('Traffic Volume', size=15)
plt.xlabel('Date', size=15)
plt.legend(fontsize=13)
plt.show()

# zoom on lastest week)
f, ax = plt.subplots(1)
f.set_figheight(5)
f.set_figwidth(15)
plt.plot(ts_test.index, test_y_i[0], marker='o', label="actual")
plt.plot(ts_test.index, ts_test_fcst[:,0], 'r', label="prediction")
ax.set_xbound(lower= datetime.date(2018,9,22), upper=datetime.date(2018,9,29))
plt.legend(fontsize=13)
plt.xlabel('Date', size=15)
ax.set_ylim(0, 7000)
plot = plt.suptitle('Lastest week Forecast vs Actuals')

